name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ "main" ]

jobs:
  fetch-and-store:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run Python script
        run: python3 app.py
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

  build_project_and_sonar_scan:
    runs-on: self-hosted
    needs: fetch-and-store
    steps:       
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.1.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  build-scan-and-push-docker:
    needs: build_project_and_sonar_scan
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker Image
        run: docker build -t gcr.io/${{ vars.GCP_PROJECT_ID }}/api-fetcher-cb:latest .
      # Scan the image with Trivy
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: gcr.io/${{ vars.GCP_PROJECT_ID }}/api-fetcher-cb:latest
          format: 'table'
          exit-code: '0'  # "1" --> Fail the build if vulnerabilities are found, "0" --> Continue the build if vulnerabilities are found
          severity: 'CRITICAL,HIGH'  # Only fail on critical/high vulnerabilities
          ignore-unfixed: true  # Skip vulnerabilities with no available fix
      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          docker: true
          image: gcr.io/${{ vars.GCP_PROJECT_ID }}/api-fetcher-cb:latest
          format: "json"  # Output format
          report-path: "gitleaks-report.json"  # Save to file
          redact: true  # Redact secrets in output
          exit-code: 0  # Continue even if leaks found
          # Set exit-code: 1 to fail on leaks
      - name: Display report location
        run: |
          echo "GitLeaks report saved to: $(pwd)/gitleaks-report.json"
          echo "Found ${{ steps.gitleaks.outputs.findingCount }} secrets"

      - name: Upload report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 1
      # - name: Gitleaks Code Scan
      #   run: gitleaks detect source . -r gitleaks-report.json -f json
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}
      - name: Push Docker Image
        run: docker push gcr.io/${{ vars.GCP_PROJECT_ID }}/api-fetcher-cb:latest

  deploy-to-cloud-run:
    needs: build-scan-and-push-docker
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        working-directory: ./terraform  # Change to Terraform dir
        run: terraform init
      - name: Terraform Apply
        working-directory: ./terraform  # Use the previous Terraform dir
        run: terraform apply -auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
